# ref https://www.elastic.co/blog/introducing-logstash-http-poller
# ref https://github.com/logstash-plugins/logstash-input-http_poller/blob/master/examples/ha_proxy.conf
input {
    # http_poller allows to call HTTP API, e.g. send request to ask for server status
  http_poller{
	urls => {
        getLog => "http://nodeweb:8080/getLog"
    }
    # Changed from interval to schedule
    schedule => {"every" => "15s"}
    request_timeout => 60
    # Store metadata about the request in this field
    metadata_target => http_poller_metadata
    # Tag this request so that we can throttle it in a filter
    tags => website_healthcheck
  }
}

filter {

    if [http_request_failure] or [http_poller_metadata][code] != 200 {
        # Tag all these events as being bad
        mutate {
            add_tag => "bad_request"
        }
    }else{
        mutate {
            add_tag => "OK"
        }
    }

    if "bad_request" in [tags]{
        drop{}
    }


    
    if "OK" in [tags]{
        grok {
            match => {"log"=> "%{TIMESTAMP_ISO8601:logTimestamp} %{DATA:logLevel} %{DATA:className}\:%{DATA:line} \[%{DATA:executor}\] - (?<details>(.|\r|\n)*)"}
        }
        date{ # use logTimestamp as the @timestamp value
            match => ["logTimestamp", "yyyy-MM-dd HH:mm:ss.SSS"]
            target => "@timestamp"
        }
        mutate{ 
            add_field => {"requestPath" => "%{[http_poller_metadata][request][url]}"}
            remove_field => ["input","agent","ecs","host","tags","@version", "fields", "message", "log", "headers", "http_poller_metadata"]
        }	
    }
}

output {
    if ([requestPath]){
        file{
            path => "/usr/share/logstash/output-files/http_poller_logs_%{+yyyy_MM_dd}.json"
            codec => "json"	
        }

        elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "changeme"
            index => "http-%{+YYYY.MM}"
        }   
    }

    stdout {}
}